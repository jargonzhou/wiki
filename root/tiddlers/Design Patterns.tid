created: 20241214013739697
creator: jargonzhou
modified: 20241214031641999
modifier: jargonzhou
tags: Modeling
title: Design Patterns



! 面向对象的设计模式

UML digram in UMLet: [[https://github.com/jargonzhou/wiki/UML/GoF]]

创建型模式(Creational Patterns):

* 抽象工厂(Abstract Factory)
* 构建者(Builder)
* 工厂方法(Factory Method)
* 原型(Prototype)
* 单例(Singleton)

结构型模式(Structural Patterns):

* 适配器(Adapter)
* 桥接(Bridge)
* 聚合(Composite)
* 装饰器(Decorator)
* 门面(Facade)
* 享元(Flyweight)
* 代理(Proxy)

行为型模式(Behavioral Patterns):

* 职责链(Chain of Responsibility)
* 命令(Command)
* 解释器(Interpreter)
* 迭代器(Iterator)
* 中间者(Mediator)
* 备忘录(Memento)
* 观察者(Observer)
* 状态(State)
* 策略(Strategy)
* 模板方法(Template Method)
* 访问者(Visitor)

! 企业集成模式(Enterprise Integration Patterns(EIP))

集成风格(Integration Styles):

> How can I integrate multiple applications so that they work together and can exchange information?

* 文件传输(File Transfer)
* 共享的数据库(Shared Database)
* 远程过程调用(Remote Procedure Invocation)
* 消息化(Messaging): 

消息化系统(Messaging Systems):

* 消息通道(Message Channel): How does one application communicate with another using messaging?
* 消息(Message): How can two applications connected by a message channel exchange a piece of information?
* 管道和过滤器(Pipes and Filters): How can we perform complex processing on a message while maintaining independence and flexibility?
* 消息路由器(Message Router): How can you decouple individual processing steps so that messages can be passed to different filters depending on a set of conditions?
* 消息转换器(Message Translator): How can systems using different data formats communicate with each other using messaging?
* 消息端点(Message Endpoint): How does an application connect to a messaging channel to send and receive messages?

消息化通道(Messaging Channels):

* 点对点通道(Point-to-Point Channel): How can the caller be sure that exactly one receiver will receive the document or perform the call?
* 发布订阅通道(Publish-Subscribe Channel): How can the sender broadcast an event to all interested receivers?
* 数据类型通道(Datatype Channel): How can the application send a data item such that the receiver will know how to process it?
* 非法消息通道(Invalid Message Channel): How can a messaging receiver gracefully handle receiving a message that makes no sense?
* 死信通道(Dead Letter Channel): What will the messaging system do with a message it cannot deliver?
* 确保的投递(Guaranteed Delivery): How can the sender make sure that a message will be delivered, even if the messaging system fails?
* 通道适配器(Channel Adapter): How can you connect an application to the messaging system so that it can send and receive messages?
* 消息化桥(Messaging Bridge): How can multiple messaging systems be connected so that messages available on one are also available on the others?
* 消息总线(Message Bus): What is an architecture that enables separate applications to work together, but in a decoupled fashion such that applications can be easily added or removed without affecting the others?

消息构造(Message Construction):

* 命令消息(Command Message): How can messaging be used to invoke a procedure in another application?
* 文档消息(Document Message): How can messaging be used to transfer data between applications?
* 事件消息(Event Message): How can messaging be used to transmit events from one application to another?
* 请求应答(Request-Reply): When an application sends a message, how can it get a response from the receiver?
* 返回地址(Return Address): How does a replier know where to send the reply?
* 关联标识符(Correlation Identifier): How does a requestor that has received a reply know which request this is the reply for?
* 消息序列(Message Sequence): How can messaging transmit an arbitrarily large amount of data?
* 消息到期(Message Expiration): How can a sender indicate when a message should be considered stale and thus shouldn’t be processed?
* 格式指示器(Format Indicator): How can a message’s data format be designed to allow for possible future changes?

消息路由(Message Routing):

* 基于内容的路由器(Content-Based Router): How do we handle a situation where the implementation of a single logical function (e.g., inventory check) is spread across multiple physical systems?
* 消息过滤器(Message Filter): How can a component avoid receiving uninteresting messages?
* 动态路由器(Dynamic Router): How can you avoid the dependency of the router on all possible destinations while maintaining its efficiency?
* 接收者列表(Recipient List): How do we route a message to a list of dynamically specified recipients?
* 分解器(Splitter): How can we process a message if it contains multiple elements, each of which may have to be processed in a different way?
* 聚合器(Aggregator): How do we combine the results of individual, but related messages so that they can be processed as a whole?
* 重排器(Resequencer): How can we get a stream of related but out-of-sequence messages back into the correct order?
* 组合消息处理器(Composed Message Processor): How can you maintain the overall message flow when processing a message consisting of multiple elements, each of which may require different processing?
* 发散收集器(Scatter-Gather): How do you maintain the overall message flow when a message needs to be sent to multiple recipients, each of which may send a reply?
* 路由表(Routing Slip): How do we route a message consecutively through a series of processing steps when the sequence of steps is not known at design-time and may vary for each message?
* 处理步骤管理器(Process Manager): How do we route a message through multiple processing steps when the required steps may not be known at design-time and may not be sequential?
* 消息代理(Message Broker): How can you decouple the destination of a message from the sender and maintain central control over the flow of messages?

消息转换(Message Transformation):

* 信封包装器(Envelope Wrapper): How can existing systems participate in a messaging exchange that places specific requirements on the message format, such as message header fields or encryption?
* 内容丰富器(Content Enricher): How do we communicate with another system if the message originator does not have all the required data items available?
* 内容过滤器(Content Filter): How do you simplify dealing with a large message, when you are interested only in a few data items?
* 声明标签(Claim Check): How can we reduce the data volume of message sent across the system without sacrificing information content?
* 标准化器(Normalizer): How do you process messages that are semantically equivalent, but arrive in a different format?
* 规范数据模型(Canonical Data Model): How can you minimize dependencies when integrating applications that use different data formats?

消息化端点(Messaging Endpoints):

* 消息化网关(Messaging Gateway): How do you encapsulate access to the messaging system from the rest of the application?
* 消息化映射器(Messaging Mapper): How do you move data between domain objects and the messaging infrastructure while keeping the two independent of each other?
* 事务性客户端(Transactional Client): How can a client control its transactions with the messaging system?
* 轮询的消费者(Polling Consumer): How can an application consume a message when the application is ready?
* 事件驱动的消费者(Event-Driven Consumer): How can an application automatically consume messages as they become available?
* 竞争的消费者(Competing Consumers): 	How can a messaging client process multiple messages concurrently?
* 消息分发器(Message Dispatcher): How can multiple consumers on a single channel coordinate their message processing?
* 选择性的消费者(Selective Consumer): How can a message consumer select which messages it wishes to receive?
* 持久的订阅者(Durable Subscriber): How can a subscriber avoid missing messages while it’s not listening for them?
* 幂等的接收者(Idempotent Receiver): How can a message receiver deal with duplicate messages?
* 服务激活器(Service Activator): How can an application design a service to be invoked both via various messaging technologies and via non-messaging techniques?

系统管理(System Management):

* 控制总线(Control Bus): How can we effectively administer a messaging system that is distributed across multiple platforms and a wide geographic area?
* 旁路(Detour): How can you route a message through intermediate steps to perform validation, testing or debugging functions?
* 窃听(Wire Tap): How do you inspect messages that travel on a point-to-point channel?
* 消息历史(Message History): How can we effectively analyze and debug the flow of messages in a loosely coupled system?
* 消息存储(Message Store): How can we report against message information without disturbing the loosely coupled and transient nature of a messaging system?
* 智能代理(Smart Proxy): How can you track messages on a service that publishes reply messages to the Return Address specified by the requestor?
* 测试消息(Test Message): What happens, though, if a component is actively processing messages, but garbles outgoing messages due to an internal fault?
* 通道清道夫(Channel Purger): How can you keep 'left-over' messages on a channel from disturbing tests or running systems?

! 基于模式的软件架构(Pattern-Oriented Software Architecture(POSA))

* 模式系统
* 并发和网络对象的模式
* 资源管理的模式
* 分布式计算的模式语言
* 模式和模式语言

! 云原生模式

* 事件驱动的微服务(Event-driven microservices)
* 应用冗余(App redundancy)
* 应用配置(Application configuration)
* 应用的生命周期(The application lifecycle)
* 访问应用(Accessing apps)
* 交互冗余(Interaction redundancy)
* 前端服务(Fronting services)
* 分析和解决问题(Troubleshooting)
* 云原生数据(Cloud-native data)

! References

* Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides. ''Design Patterns : elements of reusable object-oriented software''. Addison-Wesley: 1994.

* Gregor Hohpe and Bobby Woolf. ''Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions''. Addison-Wesley, 2004.
** [[Table of Contents in EIP website|https://www.enterpriseintegrationpatterns.com/patterns/messaging/toc.html]]


* POSA Volume 1: ''A System of Pattern''.
* POSA Volume 2: ''Patterns for Concurrent and Networked Objects''.
* POSA Volume 3: ''Patterns for Resource Management''.
* POSA Volume 4: ''A Pattern Language for Distributed Computing''.
* POSA Volume 5: ''On Patterns and Pattern Languages''.

* Schmidt, D. C.. ''Reactor: An Object Behavioral Pattern forDemultiplexing and Dispatching Handles for Synchronous Events''. 1995.

* Davis, C. ''Cloud Native Patterns''. Manning, 2019.
