created: 20241211010809322
creator: jargonzhou
modified: 20241230043630618
modifier: jargonzhou
tags: [[Data Engineering Tools]]
title: Apache Calcite

<<<.tc-big-quote
Apache Calcite is a dynamic data management framework.

It contains many of the pieces that comprise a typical database management system, but omits some key functions: storage of data, algorithms to process data, and a repository for storing metadata.

Calcite intentionally stays out of the business of storing and processing data. As we shall see, this makes it an excellent choice for mediating between applications and one or more data storage locations and data processing engines. It is also a perfect foundation for building a database: just add data.

The following features are complete.

* Query parser, validator and optimizer
* Support for reading models in JSON format
* Many standard functions and aggregate functions
* JDBC queries against Linq4j and JDBC back-ends
* Linq4j front-end
* SQL features: SELECT, FROM (including JOIN syntax), WHERE, GROUP BY (including GROUPING SETS), aggregate functions (including COUNT(DISTINCT …) and FILTER), HAVING, ORDER BY (including NULLS FIRST/LAST), set operations (UNION, INTERSECT, MINUS), sub-queries (including correlated sub-queries), windowed aggregates, LIMIT (syntax as [[Postgres|https://www.postgresql.org/docs/8.4/static/sql-select.html#SQL-LIMIT]); more details in the [[SQL reference|https://calcite.apache.org/docs/reference.html]]
* Local and remote JDBC drivers; see [[Avatica|https://calcite.apache.org/docs/avatica_overview.html]]
* Several [[adapters|https://calcite.apache.org/docs/adapter.html]]
<<<

! Terminology

! Components

* SQL language
* Algebra
* Adapters

! RTFSC

!! Dependencies

* JavaCC
* FreeMarker, FMPP

!! Projects

* [[Apache Calcite Avatica|https://github.com/apache/calcite-avatica]]: Apache Calcite's Avatica is a framework for building database drivers.

<<<.tc-big-quote
''Avatica'' is defined by ''a wire API'' between a client and a server. The Avatica //server// is an HTTP server, the Avatica //client// is a JDBC driver, and the wire API is defined by JSON or Protobuf Buffers. The flexibility of the wire API and HTTP transport allows other Avatica clients to be built in any language, implementing any client specification.
<<<

|Project|Description|h
|bom||
|release||
|arrow|Arrow adapter for Calcite|
|babel|for [[Babel parser|https://babeljs.io/docs/babel-parser]]|
|cassandra|Cassandra adapter for Calcite|
|core|Core Calcite APIs and engine|
|druid|Druid adapter for Calcite|
|elasticsearch|Elasticsearch adapter for Calcite|
|example:csv|An example Calcite provider that reads CSV files|
|example:function|Examples of user-defined Calcite functions|
|file|Calcite provider that reads files and URIs|
|geode|Geode adapter for Calcite|
|innodb|InnoDB adapter for Calcite|
|kafka|Kafka adapter for Calcite; exposes Kafka topics as stream tables|
|linq4j|Calcite APIs for LINQ (Language-Integrated Query) in Java|
|mongodb|MongoDB adapter for Calcite|
|pig|Pig adapter for Calcite|
|piglet|Pig-like language built on top of Calcite algebra|
|plus|Miscellaneous extras for Calcite|
|redis|Redis adapter for Calcite|
|server||
|spark||
|splunk|Splunk adapter for Calcite; also a JDBC driver for Splunk|
|testkit||
|ubenchmark|Microbenchmarks for Calcite|

! References

* [[Home|https://calcite.apache.org/]]
* [[Code|https://github.com/apache/calcite]]