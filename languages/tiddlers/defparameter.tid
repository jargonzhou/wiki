CLHS: Macro
created: 20241202101343920
creator: jargonzhou
modified: 20241202104057786
modifier: jargonzhou
title: defparameter

! Syntax

```lisp
defparameter name initial-value [documentation] => name

defvar name [initial-value [documentation]] => name
```

! Arguments and Values

* `name`: 一个[[符号|symbol]], 不被求值.
* `initial-value`: 一个[[形式|form]], 在`defparameter`中它总是被求值, 在`defvar`中它只在`name`未绑定时被求值.
* `documentation`: 一个字符串, 不被求值.

! Description

`defparameter`和`defvar`将`name`建立为[[动态变量|dynamic variable]].

`defparameter`无条件的将`initial-value`赋值为名为`name`的动态变量.
`defvar`只在名为`name`的动态变量未绑定时赋予其`initial-value`(如果提供了).

如果没有提供`initial-value`, `defvar`不处理名为`name`的动态变量的值cell; 如果`name`之前已绑定, 它的旧值仍有效, 如果`name`之前未绑定, 则保持未绑定状态.

如果提供了`documentation`, 它将作为类型为`variable`的文档字符串附加到`name`上.

`defparameter`和`defvar`通常作为顶层形式出现, 但它们出现在非顶层形式中也有含义.
下面描述的编译时副作用只在它们作为顶层形式出现时发生.

! Examples

```lisp
 (defparameter *p* 1) =>  *P*
 *p* =>  1
 (constantp '*p*) =>  false
 (setq *p* 2) =>  2
 (defparameter *p* 3) =>  *P*
 *p* =>  3

 (defvar *v* 1) =>  *V*
 *v* =>  1
 (constantp '*v*) =>  false
 (setq *v* 2) =>  2
 (defvar *v* 3) =>  *V*
 *v* =>  2

 (defun foo ()
   (let ((*p* 'p) (*v* 'v))
     (bar))) =>  FOO
 (defun bar () (list *p* *v*)) =>  BAR
 (foo) =>  (P V)
```

! Side Effects

! Affected By

! Exceptional Situations

! See Also

! Notes