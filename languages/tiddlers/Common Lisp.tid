created: 20241126050006202
creator: jargonzhou
modified: 20241213065236118
modifier: jargonzhou
tags: Lisp TableOfContents
title: Common Lisp
type: text/vnd.tiddlywiki

! Specifications

* [[CLHS]]: Common Lisp HyperSpec.

! Topics

* [[ÂÆè|Common Lisp Macro]]
* [[CLOS]]: Common Lisp Object System.

! Tools

* [[ASDF]]: the de facto standard build facility for Common Lisp.  `_ASDF.ipynb`, `_ASDF UIOP.ipynb`
* [[Alive]]: The Average Lisp VSCode Environment.
* [[CL-Project]]: Generate modern project skeletons for Common Lisp.
* [[Common Lisp language support for VS Code|https://github.com/qingpeng9802/vscode-common-lisp]]: This VS Code extension supports Syntax Highlighting, Snippets, Completion, Hover, Definition, References, Document Symbol, Call Hierarchy, and Semantic Tokens for Common Lisp.
* [[Quicklisp]]:  a library manager for Common Lisp. `_quicklisp.ipynb`
* [[quickproject|https://quickdocs.org/quickproject]]: Creates the skeleton of a new Common Lisp project. 2019-12-27.
* [[Roswell]]: Common Lisp environment setup Utility.
* [[SBCL]]: Common Lisp compiler. `_SBCL.ipynb`, `SBCL Threading.ipynb`
* [[SLIME]]: The Superior Lisp Interaction Mode for Emacs.
* [[SLY]]: Sylvester the Cat's Common Lisp IDE for Emacs.

Docker:

* [[CL Docker Images|https://cl-docker-images.common-lisp.dev/]]: The purpose of this project is to make it easy to use any open source ANSI Common Lisp implementation inside a Docker container.
* [[base-lisp-image|https://github.com/40ants/base-lisp-image]]: Base image for Common Lisp projects with SBCL or CCL and latest ASDF, Qlot and Roswell.
* [[s2i-lisp|https://github.com/container-lisp/s2i-lisp]]: Source-to-Image builder for Common Lisp applications on OpenShift.

!! Touch

* [[lisp-system-browser|https://github.com/mmontone/lisp-system-browser]]: Smalltalk-like system browser for Common Lisp. preinstalled in [[SLIME]]
* [[sbcl-image-builder|https://github.com/jpcima/sbcl-image-builder]]: Lisp image build for SBCL.

! Packages

* [[Alexandria|https://gitlab.common-lisp.net/alexandria/alexandria]]: Alexandria is a collection of portable public domain utilities.
* [[apply-argv|https://github.com/pve1/apply-argv]]: Apply-argv is a library for parsing command line arguments.
* [[Babel|https://github.com/cl-babel/babel]]: Babel is a charset encoding/decoding library, not unlike GNU libiconv, written in pure Common Lisp.
* [[bknr-datastore|https://github.com/bknr-datastore/bknr-datastore]]: MOP-Based in-memory database with transactions for Common Lisp.
* [[Bordeaux]]: a Common Lisp threading library.
* [[Caveman2]]: Lightweight web application framework.
* [[Ceramic|https://github.com/ceramic/ceramic]]: Desktop web apps with Common Lisp.
* [[cffi|https://github.com/cffi/cffi]]: The Common Foreign Function Interface.
* [[cl-base64|https://quickdocs.org/cl-base64]]: Base64 encoding and decoding with URI support.
* [[cl-custom-hash-table|https://github.com/metawilm/cl-custom-hash-table]]: Custom hash tables for Common Lisp.
* [[cl-fad|https://github.com/edicl/cl-fad]]: Portable pathname library.
* [[cl-html-parse|https://github.com/gwkkwg/cl-html-parse]]: HTML Parser.
* [[cl-indentify|https://github.com/yitzchak/cl-indentify|]]: A code beautifier for Common Lisp.
* [[cl-markup|https://github.com/arielnetworks/cl-markup]]: Modern markup (HTML) generation library for Common Lisp. 2013-10-03.
* [[cl-pass|https://github.com/eudoxia0/cl-pass]]: Password hashing and verification library.
* [[cl-ppcre|https://github.com/edicl/cl-ppcre]]: Portable Perl-compatible regular expressions for Common Lisp.
* [[cl-prolog2|https://github.com/cl-model-languages/cl-prolog2]]: Common Interface to ISO Prolog implementations from Common Lisp.
* [[cl-store|https://github.com/skypher/cl-store]]: an portable serialization package which should give you the ability to store all common-lisp data types (well not all yet) into streams.
* [[cl-yaml|https://github.com/eudoxia0/cl-yaml]]: A YAML parser and emitter built on top of [[libyaml|http://pyyaml.org/wiki/LibYAML]]. Uses the [[cl-libyaml|https://github.com/eudoxia0/cl-libyaml]] library.
* [[clack|https://github.com/fukamachi/clack]]: Clack is a web application environment for Common Lisp inspired by Python's WSGI and Ruby's Rack.
* [[clip|https://github.com/Shinmera/clip]]: A Common Lisp HTML templating engine..
* [[closer-mop|https://github.com/pcostanza/closer-mop]]: Closer to MOP is a compatibility layer that rectifies many of the absent or incorrect CLOS Meta Object Protocol (MOP) features across a broad range of Common Lisp implementations.
* [[clsql|https://quickdocs.org/clsql]]: Common Lisp SQL Interface library.
* [[cxml|https://github.com/sharplispers/cxml]]: Closure XML - A Common Lisp XML Parser.
* [[dissect|https://github.com/Shinmera/dissect]]: A lib for introspecting the call stack and active restarts.
* [[Djula|https://github.com/mmontone/djula]]:Djula is a port of Python's Django template engine to Common Lisp.
* [[drakma|https://github.com/edicl/drakma]]: Full-featured http/https client based on usocket.
* [[eclector|https://github.com/s-expressionists/Eclector]]: A portable, extensible Common Lisp reader.
* [[external-program|https://github.com/edicl/flexi-streams]]: A portable Common Lisp library for running external programs from within Lisp.
* [[FiveAM]]: Common Lisp regression testing framework. `FiveAM.ipynb`
* [[flexi-streams|]]: Flexible bivalent streams for Common Lisp.
* [[hunchentoot|https://github.com/edicl/hunchentoot]]: Hunchentoot is a web server written in Common Lisp and at the same time a toolkit for building dynamic websites.
* [[introspect-environment|https://github.com/Bike/introspect-environment]]: Small interface to portable but nonstandard introspection of CL environments.
* [[Ironclad|https://github.com/froydnj/ironclad]]: A cryptographic toolkit written in Common Lisp.
* [[iterate|https://iterate.common-lisp.dev/]]: iterate is an iteration construct for Common Lisp. It is similar to the CL:LOOP macro, with these distinguishing marks: (1) it is extensible, (2) it helps editors like Emacs indent iterate forms by having a more lisp-like syntax, and (3) it isn't part of the ANSI standard for Common Lisp (which is sometimes a bad thing and sometimes good). `_iterate.ipynb`
* [[ironclad|https://github.com/sharplispers/ironclad]]: A cryptographic toolkit written in Common Lisp.
* [[Log4CL|https://github.com/sharplispers/log4cl/]]: Common Lisp logging framework, modeled after Log4J. `_log4cl.ipynb`
* [[multilang-documentation|https://github.com/Shinmera/multilang-documentation]]: A drop-in replacement for cl:documentation with support for multiple languages.
* [[named-readtables|https://github.com/melisgl/named-readtables]]: Named-Readtables is a library that provides a namespace for readtables akin to the already-existing namespace of packages.
* [[nontrivial-gray-streams|https://github.com/yitzchak/nontrivial-gray-streams]]: A compatibility layer for Gray streams including extensions.
* [[paiprolog|https://github.com/quek/paiprolog]]: forked Christophe Rhodes's PAIProlog that an update of Peter Norvig's "Prolog in Common Lisp".
* [[Prove]]: archived, see [[Rove]].
* [[puri|https://quickdocs.org/puri]]: Portable Universal Resource Indentifier Library.
* [[pzmq|https://github.com/orivej/pzmq]]: ZeroMQ bindings.
* [[Reblocks|https://github.com/40ants/reblocks]]: Reblocks is the fork of the Weblocks web frameworks written by Slava Akhmechet and maintained by Scott L. Burson and Olexiy Zamkoviy.
* [[Rove]]: a unit testing framework for Common Lisp applications.
* [[rutils|https://github.com/vseloved/rutils]]: RUTILS is a syntactic utilities package for Common Lisp. `_rutils.ipynb`
* [[shasht|https://github.com/yitzchak/shasht]]: JSON reading and writing for the Kzinti.
* [[Spinneret|https://github.com/ruricolist/spinneret]]: Common Lisp HTML5 generator.
* [[static-vectors|https://github.com/sionescu/static-vectors]]: Create vectors allocated in static memory.
* [[trivial-backtrace|https://github.com/gwkkwg/trivial-backtrace]]: Portable simple API to work with backtraces in Common Lisp.
* [[trivial-do|https://github.com/yitzchak/trivial-do]]: Looping extensions that follow the style of the core DO functions.
* [[trivial-dump-core|https://github.com/rolpereira/trivial-dump-core]]: a small wrapper that provides a common interface between Lisp implementations for the creation of Lisp cores and executables.
* [[trivial-features|https://github.com/trivial-features/trivial-features]]: Ensures consistent *FEATURES* across multiple CLs.
* [[trivial-garbage|https://github.com/trivial-garbage/trivial-garbage]]: Portable finalizers, weak hash-tables and weak pointers.
* [[trivial-gray-streams|https://github.com/trivial-gray-streams/trivial-gray-streams]]: Portability library for CL gray streams.
* [[trivial-mimes|https://github.com/Shinmera/trivial-mimes]]: Tiny library to detect mime types in files.
* [[trivial-features|https://github.com/trivial-features/trivial-features]]: Ensures consistent *FEATURES* across multiple CLs.
* [[usocket|https://github.com/usocket/usocket]]: Universal socket library for Common Lisp.
* [[Weblocks|https://github.com/40ants/weblocks]]: see Reblocks.
* [[yason|https://github.com/phmarek/yason]]: Common Lisp JSON serializer written with simplicity in mind.

! More


