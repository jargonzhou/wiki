created: 20241209133637801
creator: jargonzhou
modified: 20250123030456934
modifier: jargonzhou
tags: [[Model Checking]] TableOfContents
title: TLA+

<<<.tc-big-quote
$$\texttt{TLA}^{+}$$ is the ''Temporal Logic of Actions'', for convenience, write as TLA+.

TLA+ is a high-level language for modeling programs and systems--especially concurrent and distributed ones.  It's based on the idea that the best way to describe things precisely is with simple mathematics.  TLA+ and its tools are useful for eliminating fundamental design errors, which are hard to find and expensive to correct in code.
<<<

! Terminology

! Components

* SANY: the TLA+ parser
* [[TCL]]: the TLA+ model checker
* REPL: the TLA+ REPL
* pcal.trans: the PlusCal-to-TLA+ translator
** [[PlusCal]]
* tla2tex.TLA: the TLA+-to-LaTeX translator
* Toolbox: the IDE for TLA+
* TLA+ proof manager(tlapm): TLAPM translates TLA⁺ proof constructs into forms understood by an array of backend solvers & theorem provers, enabling machine-checked proofs of correctness for TLA⁺ specifications.

!! Modules

!!! Sequences

> Specifying Systems Figure 18.1 - P341

```TLA
Seq(S) \* S for set
Len(s) \* s for sequence
s \o t \* t for another sequence
Append(s, e) \* e for element
Head(s)
Tail(s)
SubSeq(s, m, n) \* m,n for integer
SelectSeq(s, Test) \* Test for boolean operator: Test(s[i])
```

!!! FiniteSets

> Specifying Systems Figure 18.2 - P.341

```TLA
IsFiniteSet(S) \* S for set
Cardinality(S)
```

!!! Bags

```TLA
IsABag(B) \* B for bag/multiset
BagToSet(B)
SetToBag(S) \* S for set
BagIn(e, B) \* e for element
EmptyBag
CopiesIn(e, B)
B1 (+) B2
B1 (-) B2
BagUnion(S) \* S for set of bags
B1 \sqsubseteq B2
SubBag(B)
BagOfAll(F(_), B) \* F for function
BagCardinality(B)
```

!!! Numbers: Naturals, Integers, Reals

> Specifying Systems Figure 18.6 - P.348, Figure 18.7 - P.348, Figure 18.8 - P.348

```TLA
\* Naturals
Nat
a + b \* a,b for naturals
a - b
a * b
a^b
a <= b
a >= b
a < b
a > b
a..b
a \div b
a % b

\* Integers
Int
-. a \* unary -

\* Reals
Real
a/b
Infinity
```

!!! TLC

> Specifying Systems P.248

```TLA
Print(out, val)
Assert(val, out)
JavaTime

d :> e
f @@ g
Permutations(S)
SortSeq(s, _ \prec _)
```

! Usage

Actions:

* `jupyter-notebooks/Modeling/TLA/tlaplus.ipynb`
* `jupyter-notebooks/Modeling/TLA/tlaplus-vscode.ipynb`

!! Toolbox

!!! TLC Configuration

> Configurations in 'Model Overview'


Model description

* Additional Spec Options
** Additional Definitions
*** Definitions required for the model checking, in addition to the definitions in the specification module.
** Definition Override
*** Directs TLC to use alternate definitions for operators.
** Model Values
*** An additional set of model values.
** Action Constraint
*** A formula restricting a transition if its evaluation is not satisfied.
** State Constraint
*** A formula restricting the possible states by a state predicate.

What is the behavior spec?

* Initial predicate and next-state relation
** Init
** Next
* Temporal formula
* No behavior spec: to test expressions without running anything.

What is the model?

* specify the values of the declared constants.

What to check?

* Deadlock
* Invariants
** formulas true in every reachable state, to place safety invariants
* Properties
** temporal formulas true for every possible behavior, to place liveness properties.
* Additional TLC Options
** Configuration
*** Number of worker threads
*** Fraction of physical memoery allocated to TLC
*** Log base 2 of number of disk storage files
** Checking Mode
*** Post Condition
*** Alias
*** Model-checking mode View
**** Depth-first Depth
*** Simulation mode
**** Maximum length of the traces
**** Maximum length of each trace
**** Seed
**** Aril
** Features
*** Recover from checkpoint
*** Checkpoint ID
*** Profiling
**** On, Off, Action enablement
*** Visualize state graph after completion of model checking
** Parameters
*** Verify temporal properties upon termination only
*** Fingerprint seed index
*** Cardinality of largest enumerable set
*** JVM arguments
*** TLC command line parameters

How to run?: do runtime optimizations to make TLC faster.

* System resources dedicated to TLC
* Tune these parameters and set defaults
* Evaluate Constant Expressions - Model Checking Results
** General
** Statistics
*** State space progress
*** Sub-actions of next-state
** Evaluate Constant Expression
*** Expression
*** Value
** User Output
*** TLC output generated by evaluating Print and PrintT expressions.
** Progress Output

!! MongoDB

* [[Fixing a MongoDB Replication Protocol Bug with TLA+|http://conf.tlapl.us/2019/williamschultz/]] 2019
* [[Code|https://github.com/mongodb/mongo/tree/master/src/mongo/tla_plus]]

!! ZooKeeper

* [[Verifying Zookeeper based on Model-Based runtime Trace-Checking using TLA+|https://dl.acm.org/doi/abs/10.1145/3558819.3558822]]


! References

* [[The TLA+ Home Page|https://lamport.azurewebsites.net/tla/tla.html]]

* [[Code|https://github.com/tlaplus/tlaplus]]: TLC, TLA+ Toolbox
** [[TLA+ for Visual Studio Code|https://github.com/tlaplus/vscode-tlaplus]]
** [[TLA+ Examples|https://github.com/tlaplus/Examples]]: A collection of TLA⁺ specifications of varying complexities
** [[TLA+ CommunityModules|https://github.com/tlaplus/CommunityModules]]: TLA+ snippets, operators, and modules contributed and curated by the TLA+ community
** [[The TLA+ Proof Manager (tlapm)|https://github.com/tlaplus/tlapm]]: implemented in OCaml.
*** [[TLAPS: TLA+ Proof System|https://proofs.tlapl.us/doc/web/content/Home.html]]

* Lamport, L. ''Specifying Systems''. Pearson Education, 2002.
* [[Learn TLA+|https://www.learntla.com/index.html]]
* Wayne, H. ''Practical TLA+''. Apress, 2018.


Misc:

* [[TLA+ Debugger - Youtube video|https://www.youtube.com/playlist?list=PLWLcqZLzY8u9crK5PwTmEyBjgzHCotT60]]
** [[paper|https://link.springer.com/chapter/10.1007/978-3-031-26236-4_15]]
* [[Current and Future Tools for Interactive TLA+|https://emptysqua.re/blog/interactive-tla-plus/]] 2021
* [[application and `DOMAIN` of strings in TLC|https://github.com/tlaplus/tlaplus/issues/512]] 2020-10-01

