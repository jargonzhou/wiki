created: 20241202063437565
creator: jargonzhou
modified: 20241204031925049
modifier: jargonzhou
tags: CLHS
title: CLHS-14 Conses
type: text/vnd.tiddlywiki

! 14 Conses

!! 14.1 Cons概念

Cons是复合数据对象, 有两个组件: car和cdr.

图 14-1. Cons相关的一些已定义名称.

```lisp
car
cdr
cons
rplaca
rplacd
```

依赖于上下文, 一组连接的Cons可以有不同的处理视角. 不同的处理视角有多种操作支持.

!!! 14.1.1 Cons作为树

\==树== 是由Cons和原子构成的二元递归数据结构: Cons也可以是树(有时称为子树或分支), 原子是终结符号(有时称为叶子).
通常, 叶子表示数据, 而分支建立数据之间的关系.

图 14-2. 树相关的一些已定义名称.

```lisp
caaaar
caaadr
caaar
caadar
caaddr
caadr
caar
cadaar
cadadr
cadar
caddar
cadddr
caddr
cadr
cdaaar
cdaadr
cdaar
cdadar
cdaddr
cdadr
cdar
cddaar
cddadr
cddar
cdddar
cddddr
cdddr
cddr
copy-tree
nsublis
nsubst
nsubst-if
nsubst-if-not
nthcdr
sublis
subst
subst-if
subst-if-not
tree-equal
```

!!!! 14.1.1.1 树作为参数的常见约束

除非特别指出, 对任意接收树作为参数的标准函数, 如果树是循环的, 后果未定义.

!!! 14.1.2 Conse作为列表

\==列表== 是Cons链, 每个Cons的car是列表的一个元素, 每个Cons的cdr或者指向是链中下一个Cons或者是终结原子.

\==合式列表(proper list)== 是以空列表结束的列表. 空列表是合式列表, 但不是Cons.

\==非合式列表== 是不是合式列表的列表, 即是循环列表或点列表.

\==点列表== 是终结原子不是空列表的列表. 非`nil`的原子自身不被是被一个列表, 更不是点列表.

\==循环列表== 是没有终结的Cons链, 因为链中一些Cons是后续某个Cons的cdr.

图 14-3. 列表相关的一些已定义名称.

```lisp
append
butlast
copy-alist
copy-list
eighth
endp
fifth
first
fourth
last
ldiff
list
list*
list-length
make-list
member
member-if
member-if-not
nbutlast
nconc
ninth
nreconc
nth
nthcdr
pop
push
pushnew
rest
revappend
second
seventh
sixth
tailp
tenth
third
```

!!!! 14.1.2.1 列表作为关联列表

\==关联列表== 是表示关联键和值的Cons的列表, 每个Cons的car是键, cdr是与该键关联的值.

图 14-4. 关联列表相关的一些已定义名称.

```lisp
acons
assoc
assoc-if
assoc-if-not
pairlis
rassoc
rassoc-if
rassoc-if-not
```

!!!! 14.1.2.2 列表作为集

列表有时被看作集, 将其元素视为无序的, 同时假设不存在重复元素.

图 14-5. 集相关的一些已定义名称.

```lisp
adjoin
intersection
nintersection
nset-difference
nset-exclusive-or
nunion
set-difference
set-exclusive-or
subsetp
union
```

!!!! 14.1.2.3 列表作为参数的常见约束

除非特别说明, 对任意接收列表作为参数的标准函数, 在值是点列表时, 应该准备发出类型为`type-error`的错误信号.

除非特别说明, 对任意接收列表作为参数的标准函数, 如果列表是循环的, 后果未定义.

!! 14.2 Cons字典

* system class `list`
* system class `null`
* system class `cons`
* type `atom`
* function `cons`
* function `consp`
* function `atom`
* function `rplaca, rplacd`
* accessor `car`
* accessor `cdr`
* accessor `caar`
* accessor `cadr`
* accessor `cdar`
* accessor `cddr`
* accessor `caaar`
* accessor `caadr`
* accessor `cadar`
* accessor `caddr`
* accessor `cdaar`
* accessor `cdadr`
* accessor `cddar`
* accessor `cdddr`
* accessor `caaaar`
* accessor `caaadr`
* accessor `caadar`
* accessor `caaddr`
* accessor `cadaar`
* accessor `cadadr`
* accessor `caddar`
* accessor `cadddr`
* accessor `cdaaar`
* accessor `cdaadr`
* accessor `cdadar`
* accessor `cdaddr`
* accessor `cddaar`
* accessor `cddadr`
* accessor `cdddar`
* accessor `cddddr`
* function `copy-tree`
* function `sublis`
* function `nsublis`
* function `subst`
* function `subst-if`
* function `subst-if-not`
* function `nsubst`
* function `nsubst-if`
* function `nsubst-if-not`
* function `tree-equal`
* function `copy-list`
* function `list`
* function `list*`
* function `list-length`
* function `listp`
* function `make-list`
* macro `push`
* macro `pop`
* accessor `first`
* accessor `second`
* accessor `third`
* accessor `fourth`
* accessor `fifth`
* accessor `sixth`
* accessor `seventh`
* accessor `eighth`
* accessor `ninth`
* accessor `tenth`
* accessor `nth`
* function `endp`
* function `null`
* function `nconc`
* function `append`
* function `revappend`
* function `nreconc`
* function `butlast`
* function `nbutlast`
* function `last`
* function `ldiff`
* function `tailp`
* function `nthcdr`
* accessor `rest`
* function `member`
* function `member-if`
* function `member-if-not`
* function `mapc`
* function `mapcar`
* function `mapcan`
* function `mapl`
* function `maplist`
* function `mapcon`
* function `acons`
* function `assoc`
* function `assoc-if`
* function `assoc-if-not`
* function `copy-alist`
* function `pairlis`
* function `rassoc`
* function `rassoc-if`
* function `rassoc-if-not`
* function `get-properties`
* accessor `getf`
* macro `remf`
* function `intersection`
* function `nintersection`
* function `adjoin`
* macro `pushnew`
* function `set-difference`
* function `nset-difference`
* function `set-exclusive-or`
* function `nset-exclusive-or`
* function `subsetp`
* function `union`
* function `nunion`
