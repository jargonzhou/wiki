created: 20241202080237480
creator: jargonzhou
modified: 20241207112347629
modifier: zhoujiagen@gmail.com
tags: CLHS
title: CLHS Glossary

|Abbreviation |Meaning                                    |h
|adj.         |adjective                                  |
|adv.         |adverb                                     |
|ANSI         |compatible with one or more ANSI standards |
|Comp.        |computers                                  |
|Idiom.       |idiomatic                                  |
|IEEE         |compatible with one or more IEEE standards |
|ISO          |compatible with one or more ISO standards  |
|Math.        |mathematics                                |
|Trad.        |traditional                                |
|n.           |noun                                       |
|v.           |verb                                       |
|v.t.         |transitive verb                            |



; <span id="#()">()</span> `()` n.
: 符号`nil`的另一个记法, 强调`nil`表示空列表.

; <span id="#absolute">absolute</span> 绝对的 adj.
: 1 特定的时间点, 见[time](#time).
: 2 目录层次中特定位置, 见[pathname](#pathname).
: 见[relative](#relative)

; <span id="#access">access</span> 访问 n., v.t.
* 1 读或写位置的值或数组中元素的值.
* 2 尝试访问位置的值.

见[place](#place), [value](#value), [array](#array)

; <span id="#accessibility">accessibility</span> 可访问性 n.
* 可访问的状态.

; <span id="#accessible">accessible</span> 可访问的 adj.
: 1 (对象)被引用的能力.
: 2 (类的实现的共享或本地槽)已在实例的类或超类中定义.
: 3 (包中符号)在当前包中不使用包前缀可被引用的能力, 不管符号存在于包中还是继承获得的.
见[object](#object), [instance](#instance), [symbol](#symbol)

; <span id="#accessor">accessor</span> 访问器 n.
: 执行访问的操作符.

见[operator](#operator), [reader](#reader), [writer](#writer)

; <span id="#active">active</span>
: "活跃的"
: adj.
: 1 (处理器, 重启器或捕获标签)已被建立但还未被解除
: 2 (数组中元素)由大于等于0但小于填充指针的索引. 对没有填充指针的数组, 所有元素被认为是获取的.
: 见[handler](#handler), [restart](#restart), [catch tag](#catch tag), [fill pointer](#fill pointer)

; <span id="#actual-adjustability">actual adjustability</span>
: "实际可调整性"
: n.
: 数组相关的一个广义布尔值, 标识数组是否是实际可调整的.
: 见[actually adjustable](#actually adjustable), [expressed adjustability](#expressed adjustability), [adjustable-array-p](../Symbols#adjustable-array-p)

; <span id="#actual-argument">actual argument</span>
: "实参"
: n. Trad.
: 参数.
: 见[argument](#argument)

; <span id="#actual-array-element-type"></span>
: "实际数组元素类型"
: n.
: 数组实际被特化后的类型, 是数组的被表达的数组元组类型的升级的数组元素类型.
: 见[array](#array), [array-element-type](../Symbols#array-element-type), [expressed array element type](#expressed array element type), [upgraded array element type](#upgraded array element type)

; <span id="#actual-complex-part-type">actual complex part type</span>
: "实际复数部分类型"
: n.
: 复数的实部和虚部的实际表示的类型, 是复数的被表达的复数部分类型的升级的复数部分类型.
: 见[complext](#complext), [expressed complex part type ](#expressed complex part type ), [upgraded complex part type](#upgraded complex part type)

; <span id="#actual-parameter">actual parameter</span>
: "实参"
: n. Trad.
: 参数.
: 见[argument](#argument)

; <span id="#actually-adjustable">actually adjustable</span>
: "实际可调整的"
: adj.
: 可用函数`ADJUST-ARRAY`直接修改数组特性. 需要满足: 数组被表达为可调整的 或 显式用`ADJUSTABLE-ARRY-P`测试.
: 见[expressly adjustable](#expressly adjustable), [adjust-array](../Symbols#adjust-array), [adjustable-array-p](../Symbols#adjustable-array-p)

; <span id="#adjustability">adjustability</span>
: "可调整性"
: n.
: 1 被表达的可调整性
: 2 实际可调整性
: 见[expressed adjustability](#expressed adjustability), [actual adjustability](#actual adjustability)

; <span id="#adjustable">adjustable</span>
: "可调整的"
: adj.
: 1 表达的可调整性
: 2 实际可调整性
: 见[expressly adjustable](#expressly adjustable), [actually adjustable](#actually adjustable)

; <span id="#after-method">after method</span>
: ":after方法"
: n.
: 由限定符`:after`的方法.
: 见[method](#method), [qualifier](#qualifier)

; <span id="#alist">alist</span>
: "关联列表"
: n.
: 关联列表.
: 见[association list](#association list)

; <span id="#alphabetic">alphabetic</span>
: "字母的"
: n. adj.
: 1 字符: 标准字符, 实现定义的字符, 图形字符
: 2 字符的要素特质, 见2.1.4.1和2.2
: 3 当前`readtable`中有语法类型要素和有要素特质的字符, 见图2-8
: 见[character](#character)

; <span id="#alphanumeric">alphanumeric</span>
: "字母或数字的"
: adj.
: 字母字符或数值字符.
: 见[alphabetic](#alphabetic), [numeric](#numeric)

; <span id="#ampersand">ampersand</span>
: "&"
: n.
: `&`的标准字符. 见图2-5.
: 见[standard character](#standard character)

; <span id="#anonymous">anonymous</span>
: "匿名的"
: adj.
: 1 (类或函数)没有名字
: 2 (重启器)有名字nil
: 见[mame](#name)

; <span id="#apparently-uninterned">apparently uninterned</span>
: "明显未内部化的"
: adj.
: 主包为`nil`.
: 见[home package](#home package)

; <span id="#applicable">applicable</span>
: "可应用的"
: adj.
: 1 处理器可应用
: 2 方法可应用
: 3 重启器可应用
: 见[applicable handler](#applicable handler), [applicable method](#applicable method), [applicable restart](#applicable restart)

; <span id="#applicable-handler">applicable handler</span>
: "可应用的处理器"
: n.
: 活跃处理器关联的类型包含给定条件.
: 见[condition](#condition), [handler](#handler)

; <span id="#applicable-method">applicable method</span>
: "可应用的方法"
: n.
: 广义函数的方法, 其参数满足参数特化符, 见7.6.6.1.1
: 见[method](#method), [parameter specializers](#parameter specializers)

; <span id="#applicable-restart">applicable restart</span>
: "可应用的重启器"
: n.
: 1 活跃处理器关联的测试在给定条件作为参数时返回真值
: 2 活跃处理器关联的测试在`nil`作为参数时返回真值
: 见[handler](#handler)

; <span id="#apply">apply</span>
: "APPLY函数"
: v.t.
: 使用列表中元素作为参数调用函数
: 见[call](#call), [function](#function)

; <span id="#argument">argument</span>
: "参数"
: n.
: 1 作为函数被调用时的数据
: 2 格式控制中的格式化参数
: 见[function](#function), [format argument](#format argument)

; <span id="#argument-evaluation-order">argument evaluation order</span>
: "参数求值顺序"
: n.
: 参数在函数调用中的被求值的顺序, 见3.1

; <span id="#argument-precedence-order">argument precedence order</span>
: "参数优先级顺序"
: n.
: 广义函数排序可应用的方法时考虑的参数顺序
: 见[applicable method](#applicable method)

; <span id="#around-method">around method</span> `:around`方法/围绕方法 n.
: 有限定符`:around`的方法.
: 见[method](#method), [qualifier](#qualifier)

; <span id="#array">array</span> 数组 n.
: 有类型`ARRAY`的对象

; <span id="#array-element-type">array element type</span> 数组元素类型 n.
: 1 数组关联的类型
: 2 数组的实际数据元素类型
: 3 数组的被表达的数组元素类型
: 见[actual array element type](#actual array element type), [expressed array element type](#expressed array element type)

; <span id="#array-total-size">array total size</span>
: "数组总大小"
: n.
: 数组中元素总数量, 按数组维度之积计算.
: 见[dimension](#dimension)

; <span id="#assign">assign</span>
: "赋值"
: v.t.
: 改变已建立的绑定中变量的值.
: 见[binding](#binding), [variable](#variable), [setq](../Symbols#setq)

; <span id="#association-list">association list</span>
: "关联列表"
: n.
: 表示关联的键值的cons列表, 每个cons的car是键, cdr是键对应的值.
: 见[cons](#cons)

; <span id="#asterisk">asterisk</span>
: "*"
: n.
: 标准字符`*`, 见图2-5.

; <span id="#at-sign">at-sign</span>
: "@"
: n.
: 标准字符`@`, 见图2-5.

; <span id="#atom">atom</span>
: "原子"
: n.
: 不是cons的对象
: 见[](#)

; <span id="#atomic">atomic</span>
: "原子的"
: adj.
: 原子的.
: 见[atom](#atom)

; <span id="#atomic-type-specifier">atomic type specifier</span>
: "原子类型描述符"
: n.
: 对每个原子类型描述符`x`, 存在一个等价的的复合类型描述符`(x)`
: 见[compound type specifier](#compound type specifier)

; <span id="#attribute">attribute</span>
: "属性"
: n.
: 字符的程序可见的方面, 字符的标准属性是其编码, 见13.1.3
: 见[code](#code)

; <span id="#aux-variable">aux variable</span>
: "辅助变量"
: n.
: 在lambda列表中由`&aux`引入的变量, 辅助变量不是参数.
: 见[lambda list](#lambda list)

; <span id="#auxiliary-method">auxiliary method</span>
: "辅助方法"
: n.
: 构成方法对应的广义函数的完备方法集合中的一个方法.
: 见[primary methods](#primary methods), [method combination](#method combination)

; <span id="#backquote"></span>

; <span id="#backslash"></span>
: "\\"
: n.
: `\`, 称为逆斜线(reverse solidus)或反斜线(backslash). 见图2-5.

; <span id="#base-character">base character</span>

; <span id="#base-string">base string</span>

; <span id="#before-method">before method</span>

; <span id="#bidirectional">bidirectional</span>

; <span id="#binary">binary</span>

; <span id="#bind">bind</span>

; <span id="#binding">binding</span>

; <span id="#bit">bit</span>

; <span id="#bit-array">bit array</span>

; <span id="#bit-vector">bit vector</span>

; <span id="#bit-wise-logical-operation-specifier">bit-wise logical operation specifier</span>

; <span id="#block">block</span>

; <span id="#block-tag">block tag</span>

; <span id="#boa-lambda-list">boa lambda list</span>

; <span id="#body-parameter">body parameter</span>

; <span id="#boolean">boolean</span>

; <span id="#boolean-equivalent">boolean equivalent</span>

; <span id="#bound">bound</span>

; <span id="#bound-declaration">bound declaration</span>

; <span id="#bounded">bounded</span>

; <span id="#bounding-index">bounding index</span>

; <span id="#bounding-index-designator">bounding index designator</span>

; <span id="#break-loop">break loop</span>

; <span id="#broadcast-stream">broadcast stream</span>

; <span id="#built-in-class">built-in class</span>

; <span id="#built-in-type">built-in type</span>

; <span id="#byte">byte</span>

; <span id="#byte-specifier">byte specifier</span>

; <span id="#cadr">cadr</span>

; <span id="#call">call</span>

; <span id="#captured-initialization-form">captured initialization form</span>

; <span id="#car">car</span>

; <span id="#case">case</span>

; <span id="#case-sensitivity-mode">case sensitivity mode</span>

; <span id="#catch">catch</span>

; <span id="#catch-tag">catch tag</span>

; <span id="#cddr">cddr</span>

; <span id="#cdr">cdr</span>

; <span id="#cell">cell</span>

; <span id="#character">character</span>

; <span id="#character-code">character code</span>

; <span id="#character-designator">character designator</span>

; <span id="#circular">circular</span>

; <span id="#circular-list">circular list</span>

; <span id="#class">class</span>

; <span id="#class-designator">class designator</span>

; <span id="#class-precedence-list">class precedence list</span>

; <span id="#close">close</span>

; <span id="#closed">closed</span>

; <span id="#closure">closure</span>

; <span id="#coalesce">coalesce</span>

; <span id="#code">code</span>

; <span id="#coerce">coerce</span>

; <span id="#colon">colon</span>

; <span id="#comma">comma</span>

; <span id="#compilation">compilation</span>

; <span id="#compilation-environment">compilation environment</span>

; <span id="#compilation-unit">compilation unit</span>

; <span id="#compile">compile</span>

; <span id="#compile-time">compile time</span>

; <span id="#compile-time-definition">compile-time definition</span>

; <span id="#compiled-code">compiled code</span>

; <span id="#compiled-file">compiled file</span>

; <span id="#compiled-function">compiled function</span>

; <span id="#compiler">compiler</span>

; <span id="#compiler-macro">compiler macro</span>

; <span id="#compiler-macro-expansion">compiler macro expansion</span>

; <span id="#compiler-macro-form">compiler macro form</span>

; <span id="#compiler-macro-function">compiler macro function</span>

; <span id="#complex">complex</span>

; <span id="#complex-float">complex float</span>

; <span id="#complex-part-type">complex part type</span>

; <span id="#complex-rational">complex rational</span>

; <span id="#complex-single-float">complex single float</span>

; <span id="#composite-stream">composite stream</span>

; <span id="#compound-form">compound form</span>

; <span id="#compound-type-specifier">compound type specifier</span>

; <span id="#concatenated-stream">concatenated stream</span>

; <span id="#condition">condition</span>

; <span id="#condition-designator">condition designator</span>

; <span id="#condition-handler">condition handler</span>

; <span id="#condition-reporter">condition reporter</span>

; <span id="#conditional-newline">conditional newline</span>

; <span id="#conformance">conformance</span>

; <span id="#conforming-code">conforming code</span>

; <span id="#conforming-implementation">conforming implementation</span>

; <span id="#conforming-processor">conforming processor</span>

; <span id="#conforming-program">conforming program</span>

; <span id="#congruent">congruent</span>

; <span id="#cons">cons</span>

; <span id="#constant">constant</span>

; <span id="#constant-form">constant form</span>

; <span id="#constant-object">constant object</span>

; <span id="#constant-variable">constant variable</span>

; <span id="#constituent">constituent</span>

; <span id="#constituent-trait">constituent trait</span>

; <span id="#constructed-stream">constructed stream</span>

; <span id="#contagion">contagion</span>

; <span id="#continuable">continuable</span>

; <span id="#control-form">control form</span>

; <span id="#copy">copy</span>

; <span id="#correctable">correctable</span>

; <span id="#current-input-base">current input base</span>

; <span id="#current-logical-block">current logical block</span>

; <span id="#current-output-base">current output base</span>

; <span id="#current-package">current package</span>

; <span id="#current-pprint-dispatch-table">current pprint dispatch table</span>

; <span id="#current-random-state">current random state</span>

; <span id="#current-readtable">current readtable</span>

; <span id="#data-type">data type</span>

; <span id="#debug-I/O">debug I/O</span>

; <span id="#debugger">debugger</span>

; <span id="#declaration">declaration</span>

; <span id="#declaration-identifier">declaration identifier</span>

; <span id="#declaration-specifier">declaration specifier</span>

; <span id="#declare">declare</span>

; <span id="#decline">decline</span>

; <span id="#decoded-time">decoded time</span>

; <span id="#default-method">default method</span>

; <span id="#defaulted-initialization-argument-list">defaulted initialization argument list</span>

; <span id="#define-method-combination-arguments-lambda-list">define-method-combination arguments lambda list</span>

; <span id="#define-modify-macro-lambda-list">define-modify-macro lambda list</span>

; <span id="#defined-name">defined name</span>

; <span id="#defining-form">defining form</span>

; <span id="#defsetf-lambda-list">defsetf lambda list</span>

; <span id="#deftype-lambda-list">deftype lambda list</span>

; <span id="#denormalized">denormalized</span>

; <span id="#derived-type">derived type</span>

; <span id="#derived-type-specifier">derived type specifier</span>

; <span id="#designator">designator</span>

; <span id="#destructive">destructive</span>

; <span id="#destructuring-lambda-list">destructuring lambda list</span>

; <span id="#different">different</span>

; <span id="#digit">digit</span>

; <span id="#dimension">dimension</span>

; <span id="#direct-instance">direct instance</span>

; <span id="#direct-subclass">direct subclass</span>

; <span id="#direct-superclass">direct superclass</span>

; <span id="#disestablish">disestablish</span>

; <span id="#disjoint">disjoint</span>

; <span id="#dispatching-macro-character">dispatching macro character</span>

; <span id="#displaced-array">displaced array</span>

; <span id="#distinct">distinct</span>

; <span id="#documentation-string">documentation string</span>

; <span id="#dot">dot</span>

; <span id="#dotted-list">dotted list</span>

; <span id="#dotted-pair">dotted pair</span>

; <span id="#double-float">double float</span>

; <span id="#double-quote">double-quote</span>

; <span id="#dynamic-binding">dynamic binding</span>

; <span id="#dynamic-environment">dynamic environment</span>

; <span id="#dynamic-extent">dynamic extent</span>

; <span id="#dynamic-scope">dynamic scope</span>

; <span id="#dynamic-variable">dynamic variable</span>

; <span id="#echo-stream">echo stream</span>

; <span id="#effective-method">effective method</span>

; <span id="#element">element</span>

; <span id="#element-type">element type</span>

; <span id="#em">em</span>

; <span id="#empty-list">empty list</span>

; <span id="#empty-type">empty type</span>

; <span id="#end-of-file">end of file</span>

; <span id="#environment">environment</span>

; <span id="#environment-object">environment object</span>

; <span id="#environment-parameter">environment parameter</span>

; <span id="#error">error</span>

; <span id="#error-output">error output</span>

; <span id="#escape">escape</span>

; <span id="#establish">establish</span>

; <span id="#evaluate">evaluate</span>

; <span id="#evaluation">evaluation</span>

; <span id="#evaluation-environment">evaluation environment</span>

; <span id="#execute">execute</span>

; <span id="#execution-time">execution time</span>

; <span id="#exhaustive-partition">exhaustive partition</span>

; <span id="#exhaustive-union">exhaustive union</span>

; <span id="#exit-point">exit point</span>

; <span id="#explicit-return">explicit return</span>

; <span id="#explicit-use">explicit use</span>

; <span id="#exponent-marker">exponent marker</span>

; <span id="#Marker--Meaning">Marker  Meaning</span>

; <span id="#D-or-d--double-float">D or d  double-float</span>

; <span id="#E or e -float-(see-*read-default-float-format*)">E or e  float (see *read-default-float-format*)</span>

; <span id="#F-or-f--single-float">F or f  single-float</span>

; <span id="#L-or-l--long-float">L or l  long-float</span>

; <span id="#S-or-s--short-float">S or s  short-float</span>

; <span id="#export">export</span>

; <span id="#exported">exported</span>

; <span id="#expressed-adjustability">expressed adjustability</span>

; <span id="#expressed-array-element-type">expressed array element type</span>

; <span id="#expressed-complex-part-type">expressed complex part type</span>

; <span id="#expression">expression</span>

; <span id="#expressly-adjustable">expressly adjustable</span>

; <span id="#extended-character">extended character</span>

; <span id="#extended-function-designator">extended function designator</span>

; <span id="#extended-lambda-list">extended lambda list</span>

; <span id="#extension">extension</span>

; <span id="#extent">extent</span>

; <span id="#external-file-format">external file format</span>

; <span id="#external-file-format-designator">external file format designator</span>

; <span id="#external-symbol">external symbol</span>

; <span id="#externalizable-object">externalizable object</span>

; <span id="#false">false</span>

; <span id="#fbound">fbound</span>

; <span id="#feature">feature</span>

; <span id="#feature-expression">feature expression</span>

; <span id="#features-list">features list</span>

; <span id="#file">file</span>

; <span id="#file-compiler">file compiler</span>

; <span id="#file-position">file position</span>

; <span id="#file-position-designator">file position designator</span>

; <span id="#file-stream">file stream</span>

; <span id="#file-system">file system</span>

; <span id="#filename">filename</span>

; <span id="#fill-pointer">fill pointer</span>

; <span id="#finite">finite</span>

; <span id="#fixnum">fixnum</span>

; <span id="#float">float</span>

; <span id="#for-value">for-value</span>

; <span id="#form">form</span>
>
: n.
: 1 要被求值的对象.
: 2 一个符号, 一个复合形式或一个自求值对象.
: 3 一个复合形式, 首元素是操作符, 例如`quote`形式是个常量形式.
: 见[symbol](#symbol), [compound form](#compound form), [self-evaluating object](#self-evaluating object), [operator](#operator).

; <span id="#formal-argument">formal argument</span>

; <span id="#formal-parameter">formal parameter</span>

; <span id="#format">format</span>

; <span id="#format-argument">format argument</span>

; <span id="#format-control">format control</span>

; <span id="#format-directive">format directive</span>

; <span id="#format-string">format string</span>

; <span id="#free-declaration">free declaration</span>

; <span id="#fresh">fresh</span>

; <span id="#freshline">freshline</span>

; <span id="#funbound">funbound</span>

; <span id="#function">function</span>

; <span id="#function-block-name">function block name</span>

; <span id="#function-cell">function cell</span>

; <span id="#function-designator">function designator</span>

; <span id="#function-form">function form</span>

; <span id="#function-name">function name</span>

; <span id="#functional-evaluation">functional evaluation</span>

; <span id="#functional-value">functional value</span>

; <span id="#further-compilation">further compilation</span>

; <span id="#general">general</span>

; <span id="#generalized-boolean">generalized boolean</span>

; <span id="#generalized-instance">generalized instance</span>

; <span id="#generalized-reference">generalized reference</span>

; <span id="#generalized-synonym-stream">generalized synonym stream</span>

; <span id="#generic-function">generic function</span>

; <span id="#generic-function-lambda-list">generic function lambda list</span>

; <span id="#gensym">gensym</span>

; <span id="#global-declaration">global declaration</span>

; <span id="#global-environment">global environment</span>

; <span id="#global-variable">global variable</span>

; <span id="#glyph">glyph</span>

; <span id="#go">go</span>

; <span id="#go-point">go point</span>

; <span id="#go-tag">go tag</span>

; <span id="#graphic">graphic</span>

; <span id="#handle">handle</span>

; <span id="#handler">handler</span>

; <span id="#hash-table">hash table</span>

; <span id="#home-package">home package</span>

; <span id="#IO-customization-variable">I/O customization variable</span>

```lisp
*debug-io*        *error-io*         query-io*
*standard-input*  *standard-output*  *trace-output*
```

; <span id="#identical">identical</span>

; <span id="#identifier">identifier</span>

; <span id="#immutable">immutable</span>

; <span id="#implementation">implementation</span>

; <span id="#implementation-limit">implementation limit</span>

; <span id="#implementation-defined">implementation-defined</span>

; <span id="#implementation-dependent">implementation-dependent</span>

; <span id="#implementation-independent">implementation-independent</span>

; <span id="#implicit-block">implicit block</span>

; <span id="#implicit-compilation">implicit compilation</span>

; <span id="#implicit-progn">implicit progn</span>

; <span id="#implicit-tagbody">implicit tagbody</span>

; <span id="#import">import</span>

; <span id="#improper-list">improper list</span>

; <span id="#inaccessible">inaccessible</span>

; <span id="#indefinite-extent">indefinite extent</span>

; <span id="#indefinite-scope">indefinite scope</span>

; <span id="#indicator">indicator</span>

; <span id="#indirect-instance">indirect instance</span>

; <span id="#inherit">inherit</span>

; <span id="#initial-pprint-dispatch-table">initial pprint dispatch table</span>

; <span id="#initial-readtable">initial readtable</span>

; <span id="#initialization-argument-list">initialization argument list</span>

; <span id="#initialization-form">initialization form</span>

; <span id="#input">input</span>

; <span id="#instance">instance</span>

; <span id="#integer">integer</span>

; <span id="#interactive-stream">interactive stream</span>

; <span id="#intern">intern</span>

; <span id="#internal-symbol">internal symbol</span>

; <span id="#internal-time">internal time</span>

; <span id="#internal-time-unit">internal time unit</span>

; <span id="#interned">interned</span>

; <span id="#interpreted-function">interpreted function</span>

; <span id="#interpreted-implementation">interpreted implementation</span>

; <span id="#interval-designator">interval designator</span>

; <span id="#invalid">invalid</span>

; <span id="#iteration-form">iteration form</span>

; <span id="#iteration-variable">iteration variable</span>

; <span id="#key">key</span>

; <span id="#keyword">keyword</span>

; <span id="#keyword-parameter">keyword parameter</span>

; <span id="#keyword/value-pair">keyword/value pair</span>

; <span id="#lambda-combination">lambda combination</span>

; <span id="#lambda-expression">lambda expression</span>

; <span id="#lambda-form">lambda form</span>

; <span id="#lambda-list">lambda list</span>

; <span id="#lambda-list-keyword">lambda list keyword</span>

; <span id="#lambda-variable">lambda variable</span>

; <span id="#leaf">leaf</span>

; <span id="#leap-seconds">leap seconds</span>

; <span id="#left-parenthesis">left-parenthesis</span>

; <span id="#length">length</span>

; <span id="#lexical-binding">lexical binding</span>

; <span id="#lexical-closure">lexical closure</span>

; <span id="#lexical-environment">lexical environment</span>

; <span id="#lexical-scope">lexical scope</span>

; <span id="#lexical-variable">lexical variable</span>

; <span id="#Lisp-image">Lisp image</span> Lisp镜像 n.

一个Common Lisp实现的运行实例.
Lisp镜像时一个单一的地址空间, 其中每个对象可以通过单一的通用的全局环境, 直接引用符合该规范的其它对象. 

外部操作系统称其为核心镜像(core image)、fork、化身(incarnation)、作业或进程.
注意操作系统中的进程与这里定义的Lisp镜像技术上是正交的. 在操作系统中, 单个进程可以有多个Lisp镜像, 多个进程也可以在单一Lisp镜像中.
因此, Lisp镜像的特征是一个完全共享的地址空间, 所有对象可以之间相互引用.
注意, 两个通过通信机制允许共享部分但不是全部对象的进程, 被视为不同的Lisp镜像.

; <span id="#Lisp-printer">Lisp printer</span>

; <span id="#Lisp-read-eval-print-loop">Lisp read-eval-print loop</span>

; <span id="#Lisp-reader">Lisp reader</span> Lisp读取器 n. Trad.

从流中解析对象的字符表示, 生成对象的过程.
该过程由函数`read`实现.

; <span id="#list">list</span>

; <span id="#list-designator">list designator</span>

; <span id="#list-structure">list structure</span>

; <span id="#literal">literal</span>

; <span id="#load">load</span>

; <span id="#load-time">load time</span>

; <span id="#load-time-value">load time value</span>

; <span id="#loader">loader</span>

; <span id="#local-declaration">local declaration</span>

; <span id="#local-precedence-order">local precedence order</span>

; <span id="#local-slot">local slot</span>

; <span id="#logical-block">logical block</span>

; <span id="#logical-host">logical host</span>

; <span id="#logical-host-designator">logical host designator</span>

; <span id="#logical-pathname">logical pathname</span>

; <span id="#long-float">long float</span>

; <span id="#loop-keyword">loop keyword</span>

; <span id="#lowercase">lowercase</span>

; <span id="#macro">macro</span>
>
: n.
: 1 一个宏形式.
: 2 一个宏函数.
: 3 一个宏的名称.
: 见[macro form](#macro form), [macro function](#macro function), [macro name](#macro name).

; <span id="#macro-character">macro character</span>
>
: n.
: 一个字符, 当Lisp读取器在其主分发循环中遇到时, 引入读取器宏.
: 宏字符与宏没有关系.
: 见[](#)

; <span id="#macro-expansion">macro expansion</span>
>
: n.
: 1 将宏形式转换为另一个形式的过程.
: 2 作为该过程结果产生的宏.
: 见[reader macro](#reader macro).

; <span id="#macro-form">macro form</span>
>
: n.
: 代表另一个形式的形式(为了抽象、信息隐藏、语法遍历), 即或者是首元素为宏名称的复合形式, 或者是一个命名了符号宏的符号的形式.
: 见[compound form](#compound form), [macro name](#macro name), [symbol macro](#symbol macro).

; <span id="#macro-function">macro function</span>
>
: n.
: 一个有两个参数的函数: 形式和环境, 这个函数实现了宏扩展, 生成作为原始参数的形式求值后的形式.
: 见[form](#form), [environment](#environment), [macro expansion](#macro expansion).

; <span id="#macro-lambda-list">macro lambda list</span>
>
: n.
: 用在形式中以建立宏定义的扩展的lambda列表, 例如`defmacro`、`macrolet`.
: 见[3.4.4 宏lambda列表](../03-Evaluation-and-Compilation#3.4.4)

; <span id="#macro-name">macro name</span>
>
: n.
: 一个名称, 作为`macro-function`参数时返回true,
: 用在复合形式的首元素处, 标识该形式为宏形式.
: 见[macro-function](../Symbols#macro-function), [macro form](#macro form).

; <span id="#macroexpand-hook">macroexpand hook</span>
>
: n.
: `*macroexpand-hook*`的值对应的函数.
: 见[`*macroexpand-hook*`](../Symbols#*macroexpand-hook*)

; <span id="#mapping">mapping</span>

; <span id="#metaclass">metaclass</span>

; <span id="#Metaobject-Protocol">Metaobject Protocol</span>

; <span id="#method">method</span>

; <span id="#method-combination">method combination</span>

; <span id="#method-defining-form">method-defining form</span>

; <span id="#method-defining-operator">method-defining operator</span>

; <span id="#minimal-compilation">minimal compilation</span>

; <span id="#modified-lambda-list">modified lambda list</span>

; <span id="#most-recent">most recent</span>

; <span id="#multiple-escape">multiple escape</span>

; <span id="#multiple-values">multiple values</span>

; <span id="#name">name</span>

; <span id="#named-constant">named constant</span>

; <span id="#namespace">namespace</span>

; <span id="#namestring">namestring</span>

; <span id="#newline">newline</span>

; <span id="#next-method">next method</span>

; <span id="#nickname">nickname</span>

; <span id="#nil">nil</span>

; <span id="#non-atomic">non-atomic</span>

; <span id="#non-constant-variable">non-constant variable</span>

; <span id="#non-correctable">non-correctable</span>

; <span id="#non-empty">non-empty</span>

; <span id="#non-generic-function">non-generic function</span>

; <span id="#non-graphic">non-graphic</span>

; <span id="#non-list">non-list</span>

; <span id="#non-local-exit">non-local exit</span>

; <span id="#non-nil">non-nil</span>

; <span id="#non-null-lexical-environment">non-null lexical environment</span>

; <span id="#non-simple">non-simple</span>

; <span id="#non-terminating">non-terminating</span>

; <span id="#non-top-level-form">non-top-level form</span>

; <span id="#normal-return">normal return</span>

; <span id="#normalized">normalized</span>

; <span id="#null">null</span>

; <span id="#null-lexical-environment">null lexical environment</span>

; <span id="#number">number</span>

; <span id="#numeric">numeric</span>

; <span id="#object">object</span>

; <span id="#object-traversing">object-traversing</span>

; <span id="#open">open</span>

; <span id="#operator">operator</span>

; <span id="#optimize-quality">optimize quality</span>

; <span id="#optional-parameter">optional parameter</span>

; <span id="#ordinary-function">ordinary function</span>

; <span id="#ordinary-lambda-list">ordinary lambda list</span>

; <span id="#otherwise-inaccessible-part">otherwise inaccessible part</span>

; <span id="#output">output</span>

; <span id="#package">package</span>

; <span id="#package-cell">package cell</span>

; <span id="#package-designator">package designator</span>

; <span id="#package-marker">package marker</span>

; <span id="#package-prefix">package prefix</span>

; <span id="#package-registry">package registry</span>

; <span id="#pairwise">pairwise</span>

; <span id="#parallel">parallel</span>

; <span id="#parameter">parameter</span>

; <span id="#parameter-specializer">parameter specializer</span>

; <span id="#parameter-specializer-name">parameter specializer name</span>

; <span id="#pathname">pathname</span>

; <span id="#pathname-designator">pathname designator</span>

; <span id="#physical-pathname">physical pathname</span>

; <span id="#place">place</span>

; <span id="#plist">plist</span>

; <span id="#portable">portable</span>

; <span id="#potential-copy">potential copy</span>

; <span id="#potential-number">potential number</span>
: "可能的数值"
: n.
: 在一些符合标准的实现中被Lisp读取器解析为数值的文本内容, 但不要求被解析为数值.
: 没有对象是可能的数值: 一个对象或者是数值, 或者不是, 见[2.3.1.1 可能的数值的记号](../02-Syntax#2.3.1.1).
: 见[number](#number)

; <span id="#pprint-dispatch-table">pprint dispatch table</span>

; <span id="#predicate">predicate</span>

; <span id="#present">present</span>

; <span id="#pretty-print">pretty print</span>

; <span id="#pretty-printer">pretty printer</span>

; <span id="#pretty-printing-stream">pretty printing stream</span>

; <span id="#primary-method">primary method</span>

; <span id="#primary-value">primary value</span>

; <span id="#principal">principal</span>

; <span id="#print-name">print name</span>

; <span id="#printer-control-variable">printer control variable</span>

; <span id="#printer-escaping">printer escaping</span>

; <span id="#printing">printing</span>

; <span id="#process">process</span>

; <span id="#processor">processor</span>

; <span id="#proclaim">proclaim</span>

; <span id="#proclamation">proclamation</span>

; <span id="#prog-tag">prog tag</span>

; <span id="#program">program</span>

; <span id="#programmer">programmer</span>

; <span id="#programmer-code">programmer code</span>

; <span id="#proper-list">proper list</span>

; <span id="#proper-name">proper name</span>

; <span id="#proper-sequence">proper sequence</span>

; <span id="#proper-subtype">proper subtype</span>

; <span id="#property">property</span>

; <span id="#property-indicator">property indicator</span>

; <span id="#property-list">property list</span>

; <span id="#property-value">property value</span>

; <span id="#purports-to-conform">purports to conform</span>

; <span id="#qualified-method">qualified method</span>

; <span id="#qualifier">qualifier</span>

; <span id="#query-I/O">query I/O</span>

; <span id="#quoted-object">quoted object</span>

; <span id="#radix">radix</span>

; <span id="#random-state">random state</span>

; <span id="#rank">rank</span>

; <span id="#ratio">ratio</span>

; <span id="#ratio-marker">ratio marker</span>

; <span id="#rational">rational</span>

; <span id="#read">read</span>

; <span id="#readably">readably</span>

; <span id="#reader">reader</span>

; <span id="#reader-macro">reader macro</span>

; <span id="#reader-macro-function">reader macro function</span>

; <span id="#readtable">readtable</span>

; <span id="#readtable-case">readtable case</span>

; <span id="#readtable-designator">readtable designator</span>

; <span id="#recognizable-subtype">recognizable subtype</span>

; <span id="#reference">reference</span>

; <span id="#registered-package">registered package</span>

; <span id="#relative">relative</span>

; <span id="#repertoire">repertoire</span>

; <span id="#report">report</span>

; <span id="#report-message">report message</span>

; <span id="#required-parameter">required parameter</span>

; <span id="#rest-list">rest list</span>

; <span id="#rest-parameter">rest parameter</span>

; <span id="#restart">restart</span>

; <span id="#restart-designator">restart designator</span>

; <span id="#restart-function">restart function</span>

```lisp
abort     muffle-warning  use-value
continue  store-value
```

; <span id="#return">return</span>

; <span id="#return-value">return value</span>

; <span id="#right-parenthesis">right-parenthesis</span>

; <span id="#Rubout">Rubout</span>
>
: n.
: 删除字符.
: 见[13.1.7 字符名称](../13-Characters#13.1.7)

; <span id="#run-time">run time</span>

; <span id="#run-time-compiler">run-time compiler</span>

; <span id="#run-time-definition">run-time definition</span>

; <span id="#run-time-environment">run-time environment</span>

; <span id="#safe">safe</span>

; <span id="#safe-call">safe call</span>

; <span id="#same">same</span>

; <span id="#satisfy-the-test">satisfy the test</span>

; <span id="#scope">scope</span>

; <span id="#script">script</span>

; <span id="#secondary-value">secondary value</span>

; <span id="#section">section</span>

; <span id="#self-evaluating-object">self-evaluating object</span>

; <span id="#semi-standard">semi-standard</span>

; <span id="#semicolon">semicolon</span>

; <span id="#sequence">sequence</span>

; <span id="#sequence-function">sequence function</span>

; <span id="#sequential">sequential</span>

; <span id="#sequentially">sequentially</span>

; <span id="#serious-condition">serious condition</span>

; <span id="#session">session</span>

; <span id="#set">set</span>

; <span id="#setf-expander">setf expander</span>

; <span id="#setf-expansion">setf expansion</span>

; <span id="#setf-function">setf function</span>

; <span id="#setf-function-name">setf function name</span>

; <span id="#shadow">shadow</span>

; <span id="#shadowing-symbol">shadowing symbol</span>

; <span id="#shadowing-symbols-list">shadowing symbols list</span>

; <span id="#shared-slot">shared slot</span>

; <span id="#sharpsign">sharpsign</span>
: "#"
: n.
: 井号符号. 见图2-5.
: 见[standard character](#standard character)

; <span id="#short-float">short float</span>

; <span id="#sign">sign</span>

; <span id="#signal">signal</span>

; <span id="#signature">signature</span>

; <span id="#similar">similar</span>

; <span id="#similarity">similarity</span>

; <span id="#simple">simple</span>

; <span id="#simple-array">simple array</span>

; <span id="#simple-bit-array">simple bit array</span>

; <span id="#simple-bit-vector">simple bit vector</span>

; <span id="#simple-condition">simple condition</span>

; <span id="#simple-general-vector">simple general vector</span>

; <span id="#simple-string">simple string</span>

; <span id="#simple-vector">simple vector</span>

; <span id="#single-escape">single escape</span>

; <span id="#single-float">single float</span>

; <span id="#single-quote">single-quote</span>

; <span id="#singleton">singleton</span>

; <span id="#situation">situation</span>

; <span id="#slash">slash</span>

; <span id="#slot">slot</span>

; <span id="#slot-specifier">slot specifier</span>

; <span id="#source-code">source code</span>

; <span id="#source-file">source file</span>

; <span id="#space">space</span>

; <span id="#special-form">special form</span>
>
: n
: 不是宏形式的一个列表, 是一个有特殊语法或特殊求值规则形式, 可能操作求值环境或控制流.
: 特殊形式的首个元素是特殊操作符.
: 见[form](#form), [macro form](#macro form), [evaluation](#evaluation), [special operator](#special operator).

; <span id="#special-operator">special operator</span>
>
: 图3-2中列举的一组固定符号, 出现在形式的car中将该形式标识为特殊形式..
: 见[symbol](#symbol), [special form](#special form).

; <span id="#special-variable">special variable</span>

; <span id="#specialize">specialize</span>

; <span id="#specialized">specialized</span>

; <span id="#specialized-lambda-list">specialized lambda list</span>

; <span id="#spreadable-argument-list-designator">spreadable argument list designator</span>

; <span id="#stack-allocate">stack allocate</span>

; <span id="#stack-allocated">stack-allocated</span>

; <span id="#standard-character">standard character</span>

; <span id="#standard-class">standard class</span>

; <span id="#standard generic function a function-of-type-standard-generic-function.">standard generic function a function of type standard-generic-function.</span>

; <span id="#standard-input">standard input</span>

; <span id="#standard-method-combination">standard method combination</span>

; <span id="#standard-object">standard object</span>

; <span id="#standard-output">standard output</span>

; <span id="#standard-pprint-dispatch-table">standard pprint dispatch table</span>

; <span id="#standard-readtable">standard readtable</span>

; <span id="#standard-syntax">standard syntax</span>

; <span id="#standardized">standardized</span>

; <span id="#startup-environment">startup environment</span>

; <span id="#step">step</span>

; <span id="#stream">stream</span>

; <span id="#stream-associated-with-a-file">stream associated with a file</span>

; <span id="#stream-designator">stream designator</span>

; <span id="#stream-element-type">stream element type</span>

; <span id="#stream-variable">stream variable</span>

; <span id="#stream-variable-designator">stream variable designator</span>

; <span id="#string">string</span>

; <span id="#string-designator">string designator</span>

; <span id="#string-equal">string equal</span>

; <span id="#string-stream">string stream</span>

; <span id="#structure">structure</span>

; <span id="#structure-class">structure class</span>

; <span id="#structure-name">structure name</span>

; <span id="#style-warning">style warning</span>

; <span id="#subclass">subclass</span>

; <span id="#subexpression">subexpression</span>

; <span id="#subform">subform</span>

; <span id="#subrepertoire">subrepertoire</span>

; <span id="#subtype">subtype</span>

; <span id="#superclass">superclass</span>

; <span id="#supertype">supertype</span>

; <span id="#supplied-p-parameter">supplied-p parameter</span>

; <span id="#symbol">symbol</span>

; <span id="#symbol-macro">symbol macro</span>

; <span id="#synonym-stream">synonym stream</span>

; <span id="#synonym-stream-symbol">synonym stream symbol</span>

; <span id="#syntax-type">syntax type</span>

; <span id="#system-class">system class</span>

; <span id="#system-code">system code</span>

; <span id="#t">t</span>

; <span id="#tag">tag</span>

; <span id="#tail">tail</span>

; <span id="#target">target</span>

; <span id="#terminal-I/O">terminal I/O</span>

; <span id="#terminating">terminating</span>

; <span id="#tertiary-value">tertiary value</span>

; <span id="#throw">throw</span>

; <span id="#tilde">tilde</span>

; <span id="#time">time</span>

; <span id="#time-zone">time zone</span>

; <span id="#token">token</span>
: "记号"
: 数值或符号的文本表示. 见[2.3 解释记号](../02-Syntax#2.3)
: 见[number](#number), [symbol](#symbol)

; <span id="#top-level-form">top level form</span>

; <span id="#trace-output">trace output</span>

; <span id="#tree">tree</span>

; <span id="#tree-structure">tree structure</span>

; <span id="#true">true</span>

; <span id="#truename">truename</span>

; <span id="#two-way-stream">two-way stream</span>

; <span id="#type">type</span>

; <span id="#type-declaration">type declaration</span>

; <span id="#type-equivalent">type equivalent</span>

; <span id="#type-expand">type expand</span>

; <span id="#type-specifier">type specifier</span>

; <span id="#unbound">unbound</span>

; <span id="#unbound-variable">unbound variable</span>

; <span id="#undefined-function">undefined function</span>

; <span id="#unintern">unintern</span>

; <span id="#uninterned">uninterned</span>

; <span id="#universal-time">universal time</span>

; <span id="#unqualified-method">unqualified method</span>

; <span id="#unregistered-package">unregistered package</span>

; <span id="#unsafe">unsafe</span>

; <span id="#unsafe-call">unsafe call</span>

; <span id="#upgrade">upgrade</span>

; <span id="#upgraded-array-element-type">upgraded array element type</span>

; <span id="#upgraded-complex-part-type">upgraded complex part type</span>

; <span id="#uppercase">uppercase</span>

; <span id="#use">use</span>

; <span id="#use-list">use list</span>

; <span id="#user">user</span>

; <span id="#valid-array-dimension">valid array dimension</span>

; <span id="#valid-array-index">valid array index</span>

; <span id="#valid-array-row-major-index">valid array row-major index</span>

; <span id="#valid-fill-pointer">valid fill pointer</span>

; <span id="#valid-logical-pathname-host">valid logical pathname host</span>

; <span id="#valid-pathname-device">valid pathname device</span>

; <span id="#valid-pathname-directory">valid pathname directory</span>

; <span id="#valid-pathname-host">valid pathname host</span>

; <span id="#valid-pathname-name">valid pathname name</span>

; <span id="#valid-pathname-type">valid pathname type</span>

; <span id="#valid-pathname-version">valid pathname version</span>

; <span id="#valid-physical-pathname-host">valid physical pathname host</span>

; <span id="#valid-sequence-index">valid sequence index</span>

; <span id="#value">value</span>

; <span id="#value-cell">value cell</span>

; <span id="#variable">variable</span>

; <span id="#vector">vector</span>

; <span id="#vertical-bar">vertical-bar</span>
: "|"
: n.
: `|`, 称为竖线的标准字符.
: 见[](#)

; <span id="#whitespace">whitespace</span>

; <span id="#wild">wild</span>

; <span id="#write">write</span>

; <span id="#writer">writer</span>

; <span id="#yield">yield</span>
