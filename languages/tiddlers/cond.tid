created: 20241202072835335
creator: jargonzhou
modified: 20241202072843362
modifier: jargonzhou
tags: [[CLHS Symbols]]
title: cond


> \[!tip] "Macro"
> ''Syntax'':

```lisp
cond {clause}* => result*

clause::= (test-form form*)
```

''Arguments and Values'':

* `test-form`: 一个形式
* `forms`: 隐式的`progn`
* `results`: (1) 首个`test-form`为true的`clause`的`forms`的值, 或者(2) 该`clause`中没有`forms`时`test-form`的主值, 或者(3) 没有`test-form`为true时为`nil`

''Description'':

`cond`允许依赖于`test-form`执行`forms`.

`test-form`按参数列表中顺序依次求值, 直到有一个求值为true. 如果在这个子句中没有`forms`, 则`test-form`的 ''主值'' 作为`cond`形式的结果返回; 否则与该`test-form`相应的`forms`从左至右依次求值, 像在一个隐式的`progn`中一样, 最后一个形式的值作为`cond`形式的返回值.

一旦有一个`test-form`求值为true, 后续的`test-from`不再求值. 如果没有`test-form`求值为true, 则返回`nil`.

''Examples'':

```lisp
(defun select-options ()
(cond ((= a 1) (setq a 2))
			((= a 2) (setq a 3))
			((and (= a 3) (floor a 2)))
			(t (floor a 3)))) =>  SELECT-OPTIONS

(setq a 1) =>  1

(select-options) =>  2 ; ((= a 1) (setq a 2))
a =>  2

(select-options) =>  3 ; ((= a 2) (setq a 3))
a =>  3

(select-options) =>  1 ; ((and (= a 3) (floor a 2)))

(setq a 5) =>  5
(select-options) =>  1, 2 ; (t (floor a 3))
```

''Side Effects'': 无.

''Affected By'': 无.

''Exceptional Situations'': 无.

''See Also'':

[[if|#if]], [[case|#case]]

''Notes'': 无.