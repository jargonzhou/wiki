created: 20241127054557334
creator: jargonzhou
modified: 20241127055933124
modifier: jargonzhou
tags: [[Common Lisp]] ASDF
title: ASDF
type: text/vnd.tiddlywiki

* 2024-08-17

<<<.tc-big-quote
ASDF

ASDF is the de facto standard build facility for Common Lisp. Your Lisp implementation probably contains a copy of ASDF, which you can load using `(require "asdf")`.

ASDF is what Common Lisp hackers use to build and load software. It is the successor of the Lisp `DEFSYSTEM` of yore. ASDF stands for ''Another System Definition Facility''.

ASDF 3 contains two parts: asdf/defsystem and uiop.

* ''asdf/defsystem''
is a tool to describe how Lisp source code is organized in systems, and how to build and load these systems. The build happens based on a plan in term of actions that depend on previous actions; the plan is computed from the structure of the systems.

* ''uiop''
the Utilities for Implementation- and OS- Portability, formerly known as asdf/driver, is a Common Lisp portability library and runtime support system that helps you write Common Lisp software in a portable way.
<<<

! Installation

use ASDF in [[SBCL]]:

```lisp
✗ rlwrap sbcl
; load ASDF itself to Lisp image
* (require :asdf)
NIL
; check version
* (asdf:asdf-version)
"3.3.1"
```

! Usage
!! Load system

默认的system查找目录: 

* `~/common-lisp/` for ASDF 3.1.2+
* `~/.local/share/common-lisp/source/` for ASDF 2+

加载system:

```lisp
(asdf:load-system "my-system")
```

* `asdf:load-asd`

!! Make system


1. 使用默认system查找目录

*目录: `~/common-lisp/my-system`
* `my-system.asd`: 系统定义文件, 包含系统的依赖, 组件和组件间依赖.
* 加载系统: `(asdf:load-system "my-system")`.

2. 定制system查找目录

在`~/.config/common-lisp/source-registry.conf.d/`创建`xxx.conf`文件:

```lisp
(:tree "/your-direcotry/")
```

example:

```shell
mkdir -p ~/.config/common-lisp/source-registry.conf.d/
CURRENT_DIR=`pwd`
SYSTEM_NAME=example-cl-project
echo '(:tree "'$CURRENT_DIR'/")' > ~/.config/common-lisp/source-registry.conf.d/$SYSTEM_NAME.conf
```

例: `foo.asd`

```lisp
(in-package :asdf-user)
(defsystem "foo"
    :version (:read-file-form "variables" :at (3 2))
    :components
    ((:file "package")
     (:file "variables" :depends-on ("package"))
     (:module "mod"
	      :depends-on ("package")
	      :serial t
	      :components ((:file "utils")
			   (:file "reader")
			   (:file "cooker")
			   (:static-file "data.raw"))
	      :output-files (compile-op (o c) (list "data.cooked"))
	      :perform (compile-op :after (o c)
				   (cook-data
				    :in (component-pathname (find-component c "data.raw"))
				    :out (first (output-files o c)))))
     (:file "foo" :depends-on ("mod"))))
(defmethod action-description
    ((o compile-op) (c (eql (find-component "foo" "mod"))))
  "cooking data")
```

!! Constants

1. dependency library/project path

MacOS:

```lisp
* (asdf/source-registry:default-user-source-registry)
(:SOURCE-REGISTRY (:TREE (:HOME "common-lisp/"))
 (:DIRECTORY (:HOME ".sbcl/systems/"))
 (:DIRECTORY #P"/Users/zhang/.local/share/common-lisp/systems/")
 (:TREE #P"/Users/zhang/.local/share/common-lisp/source/")
 :INHERIT-CONFIGURATION)

* asdf:*central-registry*
(#P"/Users/zhang/quicklisp/quicklisp/")
```

Windows:

```lisp
* (asdf/source-registry:default-user-source-registry)
(:SOURCE-REGISTRY (:TREE (:HOME "common-lisp/"))
 (:DIRECTORY (:HOME ".sbcl/systems/"))
 (:DIRECTORY #P"C:/Users/zhouj/AppData/Local/common-lisp/systems/")
 (:TREE #P"C:/Users/zhouj/AppData/Local/common-lisp/source/")
 :INHERIT-CONFIGURATION)
 
* asdf:*central-registry*
(#P"C:/Users/zhouj/quicklisp/quicklisp/")
```

! asdf-vm

[[asdf-vm|https://asdf-vm.com/]]: The Multiple Runtime Version Manager.

! References

* [[Home|https://asdf.common-lisp.dev/]]
* [[Getting started with ASDF|https://common-lisp.net/~mmommer/asdf-howto.shtml]] - 2006-04-05
* [[Code|https://gitlab.common-lisp.net/asdf/asdf]]
** [[ASDF Best Practices|https://gitlab.common-lisp.net/asdf/asdf/blob/master/doc/best_practices.md]]
* [[SBCL ASDF Manual 3.3.1|https://www.sbcl.org/manual/asdf.html]]


!! `defsystem`


```EBNF
system-definition := ( defsystem system-designator system-option* )

(* 系统标识 *)
system-designator := simple-component-name
                    | complex-component-name
(* see [Simple component names], page 18, NOTE: Underscores are not permitted. *)
simple-component-name := lower-case string | symbol
(* see [Complex component names], page 19, 支持在一个.asd文件中放置多个系统 *)
complex-component-name := string | symbol

(* 系统选项 *)
system-option := :defsystem-depends-on system-list (* 定义系统间依赖关系 *)
                | :weakly-depends-on system-list
                | :class class-name (* 系统类, see [System class names], page 19 *)
                | :build-pathname pathname-specifier
                | :build-operation operation-name
                | system-option/asdf3
                | module-option
                | option
(* ASDF3中系统选项: These are only available since ASDF 3 (actually its alpha release 2.27) *)
system-option/asdf3 := :homepage string
                      | :bug-tracker string
                      | :mailto string
                      | :long-name string
                      | :source-control source-control
                      | :version version-specifier
                      | :entry-point object (* 指定可执行程序的入口点, see [Entry point], page 24 *)
(* 源码控制 *)
source-control := ( keyword string )
(* 模块选项 *)
module-option := :components component-list
                | :serial [ t | nil ]
(* 具体的选项 *)
option := :description string
          | :long-description string
          | :author person-or-persons
          | :maintainer person-or-persons
          | :pathname pathname-specifier (* 代码位置 *)
          | :default-component-class class-name
          | :perform method-form
          | :explain method-form
          | :output-files method-form
          | :operation-done-p method-form
          | :if-feature feature-expression (* 类似于#+ *)
          | :depends-on ( dependency-def* )
          | :in-order-to ( dependency+ )

person-or-persons := string | ( string+ )

system-list := ( simple-component-name* )

component-list := ( component-def* )
(* 组件定义 *)
component-def := ( component-type simple-component-name option* )
(* 组件类型, see [Component types], page 19 *)
component-type := :module | :file | :static-file | other-component-type
other-component-type := symbol-by-name

(* :depends-on中依赖定义 *)
(* This is used in :depends-on, as opposed to "dependency", which is used in :in-order-to *)
dependency-def := simple-component-name
                  | ( :feature feature-expression dependency-def ) (* 按特性定义依赖, see [Feature dependencies], page 22 *)
                  | ( :version simple-component-name version-specifier )
                  | ( :require module-name )

(* :in-order-to中依赖定义 *)
(* "dependency" is used in :in-order-to, as opposed to "dependency-def" *)
dependency := ( dependent-op requirement+ )
requirement := ( required-op required-component+ )
dependent-op := operation-name
required-op := operation-name

(* 路径名描述符 *)
(* NOTE: pathnames should be all lower case, and have no underscores, although hyphens are permitted. *)
pathname-specifier := pathname | string | symbol

(* 版本描述符. *)
version-specifier := string
                    | ( :read-file-form pathname-specifier form-specifier? )
                    | ( :read-file-line pathname-specifier line-specifier? )
line-specifier := :at integer (* base zero *)
form-specifier := :at [ integer | ( integer+ ) ]

(* 方法形式 *)
method-form := ( operation-name qual lambda-list &rest body )
qual := method-qualifier?
method-qualifier := :before | :after | :around

(* 特性表达式 *)
feature-expression := keyword
                      | ( :and feature-expression* )
                      | ( :or feature-expression* )
                      | ( :not feature-expression )

(* 操作名 *)
operation-name := symbol
```

