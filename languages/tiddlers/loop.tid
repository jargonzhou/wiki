created: 20241202074246422
creator: jargonzhou
modified: 20241202074307891
modifier: jargonzhou
tags: [[CLHS Symbols]]
title: loop


> \[!tip] "Macro"
> ''Syntax'':

```lisp
; 简单的循环形式
loop compound-form* => result*
; 扩展的循环形式
loop [name-clause] { variable-clause }* { main-clause }* => result*
```

```EBNF
(* 1 名称从句 *)
name-clause::= named name

(* 2 变量从句 *)
variable-clause::= with-clause | initial-final | for-as-clause
(* 2.1 WITH从句 *)
with-clause::= with var1 [type-spec] [= form1] { and var2 [type-spec] [= form2] }*

(* 3 主从句 *)
main-clause::= unconditional | accumulation | conditional | termination-test | initial-final

(* 2.2/3.5 序言和后继从句 *)
initial-final::= initially compound-form+ | finally compound-form+

(* 3.1 无条件执行从句 *)
unconditional::= { do | doing } compound-form+ | return { form | it }
(* 3.2 累积从句 *)
accumulation::= list-accumulation | numeric-accumulation
list-accumulation::= { collect | collecting | append | appending | nconc | nconcing } { form | it }
                     [into simple-var]
numeric-accumulation::= { count | counting | sum | summing | }
                         maximize | maximizing | minimize | minimizing { form | it }
                        [into simple-var] [type-spec]
(* 3.3 条件执行从句 *)
conditional::= { if | when | unless } form selectable-clause { and selectable-clause }*
               [else selectable-clause { and selectable-clause }*]
               [end]
selectable-clause::= unconditional | accumulation | conditional
(* 3.4 终止测试从句 *)
termination-test::= while form | until form | repeat form | always form | never form | thereis form

(* 2.3 for-as从句 *)
for-as-clause::= { for | as } for-as-subclause { and for-as-subclause }*
for-as-subclause::= for-as-arithmetic | for-as-in-list | for-as-on-list | for-as-equals-then |
                    for-as-across | for-as-hash | for-as-package
for-as-arithmetic::= var [type-spec] for-as-arithmetic-subclause
for-as-arithmetic-subclause::= arithmetic-up | arithmetic-downto | arithmetic-downfrom
arithmetic-up::= [ [ { from | upfrom } form1
                    | { to | upto | below } form2
                    | by form3 ] ]+
arithmetic-downto::= [ [ {{ from form1 }}1
                        | {{ { downto | above } form2 }}1
                        | by form3 ] ]
arithmetic-downfrom::= [ [ {{ downfrom form1 }}1
                          | { to | downto | above } form2
                          | by form3 ] ]
for-as-in-list::= var [type-spec] in form1 [by step-fun]
for-as-on-list::= var [type-spec] on form1 [by step-fun]
for-as-equals-then::= var [type-spec] = form1 [then form2]
for-as-across::= var [type-spec] across vector
for-as-hash::= var [type-spec] being { each | the }
               { { hash-key | hash-keys } { in | of } hash-table
                 [using (hash-value other-var)]
               | { hash-value | hash-values } { in | of } hash-table
                 [using (hash-key other-var)]}
for-as-package::= var [type-spec] being { each | the }
                  { symbol | symbols
                  | present-symbol | present-symbols
                  | external-symbol | external-symbols }
                  [{ in | of } package]
(* 2.1.1 类型描述和变量 *)
type-spec::= simple-type-spec | destructured-type-spec
simple-type-spec::= fixnum | float | t | nil
destructured-type-spec::= of-type d-type-spec
d-type-spec::= type-specifier | (d-type-spec . d-type-spec)
var::= d-var-spec
var1::= d-var-spec
var2::= d-var-spec
other-var::= d-var-spec
d-var-spec::= simple-var | nil | (d-var-spec . d-var-spec)
```

''Arguments and Values'':

* `compound-form`: 一个复合形式
* `name`: 一个符号
* `simple-var`: 一个符号(变量名称)
* `form, form1, form2, form3`: 一个形式
* `step-fun`: 求值为单个传递参数的函数肚饿形式
* `vector`: 求值为向量的形式
* `hash-table`: 求值为哈希表的形式
* `package`: 求值为包指示器的形式
* `type-specifier`: 一个类型描述符. 可以是原子类型描述符或复合类型描述符, 在解构中恰当解析方面引入了额外的复杂性; 更多信息见[[6.1.1.7 解构|../06-Iteration#6.1.1.7]].
* `result`: 一个对象

''Description'':

见[[6.1 循环功能|../06-Iteration#6.1]].

''Examples'':

```lisp
;; An example of the simple form of LOOP.
 (defun sqrt-advisor ()
   (loop (format t "~&Number: ")
     (let ((n (parse-integer (read-line) :junk-allowed t)))
       (when (not n) (return))
       (format t "~&The square root of ~D is ~D.~%" n (sqrt n)))))
=>  SQRT-ADVISOR
 (sqrt-advisor)
>>  Number: 5<NEWLINE>
>>  The square root of 5 is 2.236068.
>>  Number: 4<NEWLINE>
>>  The square root of 4 is 2.
>>  Number: done<NEWLINE>
=>  NIL

;; An example of the extended form of LOOP.
 (defun square-advisor ()
   (loop as n = (progn (format t "~&Number: ")
                   (parse-integer (read-line) :junk-allowed t))
     while n
     do (format t "~&The square of ~D is ~D.~%" n (* n n))))
=>  SQUARE-ADVISOR
 (square-advisor)
>>  Number: 4<NEWLINE>
>>  The square of 4 is 16.
>>  Number: 23<NEWLINE>
>>  The square of 23 is 529.
>>  Number: done<NEWLINE>
=>  NIL

;; Another example of the extended form of LOOP.
 (loop for n from 1 to 10
   when (oddp n)
     collect n)
=>  (1 3 5 7 9)
```

''Affected By'': 无.

''Exceptional Situations'': 无.

''See Also'':

[[do|#do]], [[dolist|#dolist]], [[dotimes|#dotimes]], [[return|#return]], [[go|#go]], [[throw|#throw]], [[6.1.1.7 解构|../06-Iteration#6.1.1.7]].

''Notes'':

除了简单的循环形式中不能用本地宏`loop-finish`, 简单的循环形式与扩展的循环形式按如下方式关联:

```lisp
(loop compound-form*) ==  (loop do compound-form*)
```