created: 20241205023935522
creator: jargonzhou
modified: 20250102091648552
modifier: jargonzhou
tags: Compiler
title: Compiler Glossary

! <<a "AST">> AST: Abstract Syntax Tree

! <<a "AdHocSyntax-DirectedTranslation">> Ad Hoc Syntax-Directed Translation

! <<a "AttributeGrammarFramework">> Attribute-Grammar Framework

! <<a "BNF">> BNF: Backus-Naur Form, 巴科斯范式

* [[more|https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form]]

! <<a "BottomUpParsing">> Bottom-Up Parsing

! <<a "CodeShape">> Code Shape

! <<a "CompilerStructure">> Compiler Structure

* Input: source program
* Output: target program
* Components
** Front End
*** <a href="##Scanner">Scanner</a>
*** <a href="##Parser">Parser</a>
** Optimizer: an IR-to-IR transformer.
** Back End
*** <a href="##InstructionSelection">Instruction Selection</a>
*** <a href="##InstructionScheduling">Instruction Scheduling</a>
*** <a href="##RegisterAllocation">Register Allocation</a>
* Data Structure
** <a href="##IR">IR</a>

! <<a "CFG">> CFG: Context-Free Grammar

! <<a "DFA">> DFA

! <<a "Data-FlowAnalysis">> Data-Flow Analysis

! <<a "GC">> GC: Garbage Collection

! <<a "Grammar">> Grammar, 文法

! <<a "InstructionScheduling">> Instruction Scheduling

''Instruction scheduling'' aims to reorder the operations in a procedure to reduce its running time.

approaches:

* Greedy List Scheduling

! <<a "InstructionSelection">> Instruction Selection

The process of mapping <a href="##IR">IR</a> operations into target machine operations is calledd ''instruction selection''.

approaches:

* Tree-Pattern Matching
* Peephole Optimization

! <<a "IR">> IR: Intermediate Representation

! <<a "LL">> LL

! <<a "LR">> LR

! <<a "NFA">> NFA

! <<a "Optimization">> Optimization

! <<a "ParseTree">> Parse Tree

! <<a "Parser">> Parser

! <<a "Procedure">> Procedure

! <<a "RegisterAllocation">> Register Allocation

Hardware registers are constrained resources, compilers usually include a pass that allocation and assign registers to program values.

approaches:

* Graph Coloring

! <<a "RegularExpression">> Regular Expression

! <<a "ScalarOptimization">> Scalar Optimization

! <<a "Scanner">> Scanner

! <<a "SSA">> SSA: Static Single-Assignment

! <<a "SymbolTable">> Symbol Table

! <<a "Syntax">> Syntax

! <<a "Top-DownParsing">> Top-Down Parsing

! <<a "TypeInference">> Type Inference

! <<a "TypeSystem">> Type System